#!/bin/bash
# update - Auto-update host.py and user-agents.txt from GitHub
# By Wannazid | https://github.com/Nizwara/host-check

set -euo pipefail

REPO_OWNER="Nizwara"
REPO_NAME="host-check"
BRANCHES=("main" "master")
HOST_PY_URL_BASE="https://raw.githubusercontent.com/$REPO_OWNER/$REPO_NAME"
USER_AGENTS_URL_BASE="$HOST_PY_URL_BASE"

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
HOST_PY="$SCRIPT_DIR/host.py"
USER_AGENTS="$SCRIPT_DIR/user-agents.txt"
BACKUP_DIR="$SCRIPT_DIR/.backups"
DATE=$(date +"%Y%m%d_%H%M%S")

echo "🚀 Updating Host Response Checker from https://github.com/$REPO_OWNER/$REPO_NAME..."

# Buat folder backup jika belum ada
mkdir -p "$BACKUP_DIR"

# Backup file yang akan di-update
if [[ -f "$HOST_PY" ]]; then
    cp "$HOST_PY" "$BACKUP_DIR/host.py.$DATE.bak"
    echo "💾 Backed up old host.py → $BACKUP_DIR/host.py.$DATE.bak"
fi

if [[ -f "$USER_AGENTS" ]]; then
    cp "$USER_AGENTS" "$BACKUP_DIR/user-agents.txt.$DATE.bak"
    echo "💾 Backed up old user-agents.txt → $BACKUP_DIR/user-agents.txt.$DATE.bak"
fi

# Cek koneksi internet & downloader
if command -v curl >/dev/null 2>&1; then
    DOWNLOADER="curl -s -o"
elif command -v wget >/dev/null 2>&1; then
    DOWNLOADER="wget -q -O"
else
    echo "❌ Error: Neither 'curl' nor 'wget' found. Install one to proceed."
    exit 1
fi

# Fungsi untuk download dan cek keberhasilan
download_file() {
    local url="$1"
    local dest="$2"
    local filename=$(basename "$dest")

    echo "⬇️  Downloading latest $filename..."
    if $DOWNLOADER "$dest" "$url"; then
        # Cek apakah file berisi 404 atau error
        if grep -q "404: Not Found\|Not Found\|Repository not found" "$dest" 2>/dev/null; then
            echo "❌ Downloaded file contains 404 error. Trying next branch..."
            return 1
        fi
        # Cek apakah file kosong
        if [[ ! -s "$dest" ]]; then
            echo "❌ Downloaded file is empty. Trying next branch..."
            return 1
        fi
        echo "✅ $filename updated successfully!"
        return 0
    else
        echo "❌ Failed to download $filename. Trying next branch..."
        return 1
    fi
}

# Coba semua branch
for branch in "${BRANCHES[@]}"; do
    HOST_PY_URL="$HOST_PY_URL_BASE/$branch/host.py"
    USER_AGENTS_URL="$USER_AGENTS_URL_BASE/$branch/user-agents.txt"

    if download_file "$HOST_PY_URL" "$HOST_PY"; then
        echo "ℹ️  Using branch: $branch"
        break
    fi
done

# Jika gagal semua branch
if [[ ! -s "$HOST_PY" ]] || grep -q "404: Not Found\|Not Found" "$HOST_PY" 2>/dev/null; then
    echo "❌ All branches failed. Restoring backup..."
    mv "$BACKUP_DIR/host.py.$DATE.bak" "$HOST_PY" 2>/dev/null || true
    exit 1
fi

# Coba download user-agents.txt dari branch yang sama
for branch in "${BRANCHES[@]}"; do
    USER_AGENTS_URL="$USER_AGENTS_URL_BASE/$branch/user-agents.txt"
    if download_file "$USER_AGENTS_URL" "$USER_AGENTS"; then
        echo "ℹ️  Using branch: $branch for user-agents.txt"
        break
    fi
done

# Jika gagal download user-agents.txt, biarkan yang lama tetap ada
if [[ ! -s "$USER_AGENTS" ]]; then
    echo "⚠️  Failed to download user-agents.txt. Keeping existing file."
    rm -f "$USER_AGENTS" 2>/dev/null
    mv "$BACKUP_DIR/user-agents.txt.$DATE.bak" "$USER_AGENTS" 2>/dev/null || true
fi

# Beri izin eksekusi
chmod +x "$HOST_PY"

echo ""
echo "🎉 Update completed successfully!"
echo "ℹ️  You can now run: ./host.py -t example.com"
echo ""
